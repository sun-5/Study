<?php
//数组
/*array数据的组合，指将一组数据存储到一个指定容器中，用变量指向该容器
数组定义语法
1.使用array关键字：$变量 = array(元素1，元素2，元素3)
2.使用中括号包裹数据： $变量 = [元素1，元素2]
3.隐形定义数组：给变量增加一个中括号，系统自动变成数组
$变量[] = 值1；如果不提供下标，系统自动生成数字
$变量[0] = 值1；中括号里面成为下标key，该下标可以是字母或数字，与变量命名的规则相似

*/
$arr = array('1',2,'hello');

$arr1 = ['1',2,'hello'];

$arr2[] = 1;
$arr2[10] = 100;
$arr2[] = 50;
$arr2['key'] = 'key';//混合数组
$arr2[1] ='asd'; 
var_dump($arr2);
/*
php数组特点
1.可以整数下标或者字符串下标
如果数组下标都为整数：索引数组
如果数组下标都为字符串：关联数组
2.不同下标可以混合存在：混合数组
3.数组元素的顺序以放入顺序为准，跟下标无关
4.数字下标的自增长特性：从0开始自动增长，如果中间手动出现较大的，后面自动从最大的开始
5.特殊值下标的自动转换
    布尔值：true false
    空：NULL
6.php数组元素没有类型限制
7.php中元素没有长度限制
*/
//特殊下标转换
$arr3[false] = false; //0
$arr3[true] = true; // 1
$arr3[NULL] = NULL;// ‘’
var_dump($arr3);
/*
多维数组
数组里面的元素又是数组
php没有维度限制，不建议超过三维以上数组，会增加访问复杂度，降低访问效率
二维数组
数组中所有元素都是一维数组
不规则数组 异型数组
数组中元素不规则，有普通基本变量也有数组
*/
//定义二维数组
$info = array(
    array('name'=>'Jim','age'=>30),
    array('name'=>'Lming','age'=>20),
    array('name'=>'Sim','age'=>10)
);
echo  '<hr>';
print_r($info);
echo  '<hr>';
/*
数组遍历
普通数组数据的访问是通过数组元素的下标来实现访问，如果数组中所有数据需要依次输出，需要我们用到一些简化的规则来实现自动获取下标 以及 输出数组元素
$arr = array($arr1,$arr2)
$arr[0] 为 $arr1
$$arr[1] 为 $arr2

ForEach遍历语法
ForEach($数组变量 as[$下标=>]$值){
    通过$下标访问元素的下标，通过$值，访问元素的值
}
通常：如果是关联数组（字母下标）就需要下标，如果是数字下标就直接访问值即可

在进行数据存储定义时候，通常二维数组不会两个维度的key下标都为数字，一般都是一维为数字，
二维为字符串（数据库表字段），所以在进行遍历的时候，通常是只需要针对一维进行遍历，取得二维数组元素，然后二维数组元素通过下标去访问
*/
$arr4 = array(1,2,3,4,5,6,7,8,9);
// foreach循环
foreach($arr4 as $k=>$v){
    echo $k,':',$v,'<br>';//v随意命名，代表值
    //k对应为下标，想获取 可以加入 
}
$arr5 = array(
    0=>array('name'=>'Tom','age'=>30),
    1=>array('name'=>'Jim','age'=>28)
);
// 通过foreach遍历一维元素
foreach($arr5 as $v){
    //1.可以继续遍历：增加foreach遍历$v
    //2.可以使用下标访问
    echo 'name is:',$v['name'],'and age is:',$v['age'],'<br>';
}
/*
foreach遍历原理：本质数组内部有一根指针，默认指向数组第一个元素，
foreach就是利用指针去获取数据，同时移动指针
1.foreach重置指针：让指针指向第一个元素；
2.进入foreach循环，通过指针取得当前第一个元素，然后将下标去除放到对应的下标变量中，将值取出放到对应的变量$V中；
3.指针下移（本质是第2步之后，进入循环体之前）
4.重复2 和 3，直到2的时候，取不到值，指针指向数组最后
*/
// for循环  索引数组 下标规律
$arr5 = array(1,2,3,6,5,4,7,8,9);
for($i=0,$len=count($arr5);$i<$len;$i++){ //for循环数组
    echo 'key is:',$i,'and value is:',$arr5[$i],'<br>';
}
/*
while 配合 each和list遍历数组
each函数：能够从一个数组中获取当前数组指针所指向的元素的下标和值，拿到之后将数组指针下移，同时将拿到的元素下标和值以一个四个元素的数组返回：
0下标-》取得元素的下标值
1下标=》取得元素的值
key下标=》取得元素的下标值
value下标=》取得元素的值
list函数：是一种结构，不是一种函数（没有返回值），是list提供一堆变量去从一个数组中取得元素值，然后依次存放到对应的变量当中（批量为变量赋值：值来源于数组）；
list 必须从索引数组中去获取数据，而且必须从0开始
*/
$arr6 = array(1,'name'=>'Tom',3,'age'=>30);
echo  '<pre>';
print_r(each($arr6));//1
print_r(each($arr6));//name tom  each再次执行指针下移 
print_r(each($arr6));//3
print_r(each($arr6));//age 30
var_dump(each($arr6));//没有值 bool(false) 取不到值
echo  '<hr>';
//list结构
$arr7 = array(1,2=>1);//第二个元素下标为2
list($first)=$arr7;//拿到数组第一个数据
var_dump($first);
/*
list($first,$second)=$arr7; 错误：second变量对应的下标为元素下标1的，但是数组没有
 list与each配合特别好：each一定有两个元素就是0和1下标元素
 list【变量1，变量2】=each（数组）；是一种赋值运算，但是可以得到false结果
*/

//while循环
while(list($key,$value) = each($arr6)){
   // list($key,$value) = each($arr6);//each返回数组第一个元素具体，形式为数组，each能取到值 就循环 指针下移
    echo 'key is:'.$key.' value is:'.$value.'<br>';
}   

?>