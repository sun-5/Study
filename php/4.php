<?php
//函数
//function 是一种语法结构，将实现某一个功能的代码块（多行代码）封装到一个结构中，从而实现代码的重复利用

//函数定义语法
//函数有：function关键字，函数名，参数（形参，实参），函数体，返回值
/*基本语法：
    function abc(参数){
        函数体
        返回值：return 结果
    }
*/

function display(){
    echo 'hello world'; //没有返回值
};
display();

/*
函数执行的内存分析
1.读取代码进入代码段
2.根据代码逐行执行

编译和执行是分开的，先编译后执行

函数命名规范
由字母，数字，下划线组成，不能以数字开头

函数作为一种常用结构，一般遵循以下规则：函数名字一般代表着函数功能
1.驼峰法
2.下划线法

函数名字：在一个脚本周期中，不允许出现同名函数！！

*/
/*
参数详解

形参：形式参数，不具有实际意义的参数，是在行数定义时使用的参数
实参：实际参数，具有实际数据意义的参数，是在行数调用时使用的参数
形参是实参的载体：实参在调用时通常是需要传入到函数内部参与计算，那么需要实参给形参赋值

默认值
*/
function jian($num1=0,$num2=0){
    echo $num1-$num2;
};
/*
jian($num1) 默认值如果存在，可以不用传入
注意：1.默认值的定义是放在最后边的多个，不能左边形参有默认值，但是右边没有
函数外部定义的变量名字与函数定义的形参名字冲突（同名）是没有任何关联关系的
如果多个函数使用同样的形参名字也不冲突
*/

/*
引用传值
基本定义语法：function 函数名(形参1，&形参2){

}调用时候，必须给引用传值的参数位置，传入实际参数，而且参数本身必须是变量

*/
function dis($a,&$b){
    $a = $a * $a;
    $b = $b * $b;
    echo $a,'<br>',$b,'<br>';
};
$a  = 10;
$b = 5;
dis($a,$b);//先执行，b改变为25
echo '<hr>',$a,'<br>',$b;//输出为改变后的b
/*
100 25 /  10 25
说明：
函数在定义时候，对应的b形参采用的是取地址，所以实参传入之后，系统b取到了外部变量b的内存地址
而a取得是值，因此改变之后，a只改变了函数内部自己，b改变了所有引用b的值

*/

/*
函数体
大括号里面的所有代码成为函数体：
定义变量，定义常量，使用流程控制 分支 循环，调用函数

函数返回值
返回值：return 指的是将函数实现的结果，通过return 关键字，返回给函数外部（函数调用处）
在php中所有的函数都有返回值，如果没有明确 return使用，那么系统默认返回 NULL

*/

function ada(){
    echo __FUNCTION__;//输出函数当前名字
};
ada();
// var_dump(ada()); 显示NULL
function add($num1,$num2){
    return $num1 + $num2;
    echo $num1;//因为return 结束了函数,所有后面的步骤不执行
}
$res = add(10,20);//外部定义变量接收函数返回值
echo $res;


// 注意：函数返回值可以是任意数据类型
/*Return 关键字:
1.return 在函数内部存在的价值:返回当前函数的结果(当前函数运行结束!)
2. return还可以在文件中直接使用(不在函数中):代表文件将结果return后面跟的内容,
    转交给包含当前文件的位置.(通常在系统配置文件中使用较多.)


*/
/*
作用域
变量能够被访问的区域
1.变量可以在普通代码中定义
2.变量可以在函数内部定义

在php内中作用域严格来说分为两种:但是php内部还定义一些严格意义之外的一种,所以总归算三种:
1.全局变量:就是用户普通定义的变量,函数外部定义
    所属全局空间:在php中只允许在全局空间使用,:理论上函数内部不可访问!!
    脚本周期:直到脚本运行结束(最后一行代码执行完)

2.局部变量:函数内部定义
    所属当前函数内部:在php中只允许在当前函数内部使用
    函数周期:函数执行结束(函数是在栈区中开辟独立内存空间运行)

3.超全局变量:php系统定义的变量(预定义变量:$_SERVER/$_POST)
    所属超全局空间:没有访问显示,函数内外都可以访问

*/
$global = 'global area';//全局变量 最终会被系统纳入到超全局变量中：$GLOBALS['global']
function disp(){
    $inner = __FUNCTION__;//局部变量
    //echo $global;//访问全局变量  无法访问 
    echo $GLOBALS['global'];//函数内部访问全局变量 通过超全局变量
}
disp();
//echo  $inner； 全局无法访问局部变量
// 解决方案：超全局变量！！
/*超全局变量会将全局变量自动纳入到 $GLOBALS 里面，而 $GLOBALS 没有作用域限制，
    所以能够帮助局部去访问全局变量，但是必须使用数组方式！！
    
 */

 /*
 函数内部使用外部变量：
    除了$GLOBALS之外，
    通过参数传值，
    如果要统一战线，可以使用引用传值（形参1，&形参2)）
    php中还有一种方式，能够全局访问局部，局部访问全局，global关键字

Global关键字：是一种在函数里面定义变量的一种方式
1.如果使用 global 定义的变量名在外部存在（全局变量），那么系统在函数内部定义的变量，
    直接指向外部全局变量 所指向的内存空间 （同一变量）
2.如果使用 global 定义的变量名在外部不存在（全局变量），系统会自动在全局空间（外部）
    定义一个与局部变量同名的全局变量
通过 global 无论内外定义的变量，都变为一个超全局变量，同一个内存地址

基本语法：
Global 变量名；//不能赋值
变量名 = 值；修改
 */
function abc(){
    global $global; //全局空间已存在
    echo $global;

    global $local;//定义变量：全局不存在
    $local =' innner';
}
echo $local;//全局访问 ‘局部’变量

?>