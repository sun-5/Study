<?php
/*
编程思想
如何利用数学模式，来解决对应的需求问题，然后利用代码实现对应的数据模型（逻辑）

算法：使用代码实现对应的数学模型，从而解决对应的业务问题。

递推算法
是一种简单的算法，通过已知条件，利用特定关系得出中间推论，直至得到结果的算法。递推算法分为顺推和逆推

顺推：通过最简单的已知条件，然后逐步推演结果
逆推：通过结果找到规律，然后推到已知条件

斐波那契数列：1 1 2 3 5 8 13.....通常需求：请求得指定位置N所对应的值

找规律：
1.第一个数1
2.第二个数也是1
3.从第三位开始：属于前两位的和
代码解决思路：
1.如果数字位置为1和2，结果都是1
2.从第三个开始，想办法得到前两个的结果，就可以得到

终极解决办法：想办法把要求的位置之前的所有的值都列出来，那么要求的数就可以通过前两个之和计算，使用数组存储数值

*/
$f[1] = 1;
$f[2] = 1;//如果想要第一个或者第二个结果，那么可以直接给出
$des = 15;
for($i = 3;$i<=$des;$i++){
    $f[$i] = $f[$i-1] +$f[$i-2];
}
echo '<pre>';
print_r($f);
echo '</pre>';
function my_recursive($des){
    if($des ==1||$des==2) return 1;
    $f[1] = 1;
    $f[2] = 1;//如果想要第一个或者第二个结果，那么可以直接给出
    
    for($i = 3;$i<=$des;$i++){
        $f[$i] = $f[$i-1] +$f[$i-2];
    }
    return $f[$des];
}
echo my_recursive(20);
echo '<hr>';
/*
递归算法
把问题转化为规模缩小了的同类问题的子问题。然后递归调用函数（或过程）来表示问题的解。

1.简化问题：找到最优子问题 不能再小
2.函数自己调用自己

斐波那契数列：1 1 2 3 5 8 13.....

需求：求指定位置的数列的值
规律：前两个之和
F(N) = F(N-1) + F(N-2)；
F(N-1) = F(N-2) + F(N-3)；
F(N-2) = F(N-3) + F(N-4)；
..
F(2) = F(1)= 1；

递归思想中：
递归点：发现当前问题可以有解决当前问题的函数，去解决规模比当前小一点的问题来解决
    F(N) = F(N-1) + F(N-2)；
递归出口：问题解决的时候，已经到达最优子问题，不能再次调用函数
递归本质：函数调用函数，同时调用n多函数（自己），空间换时间
*/
function recursion($n){
    //递归出口
    if($n==1||$n==2)return 1;
    //递归点：求N的值 ，与求N-1的值一模一样，只是N-1的规模比N小
    return recursion($n-1)+recursion($n-2);
}
echo recursion(20);
?>